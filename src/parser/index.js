/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,16],$V5=[1,15],$V6=[5,7,8,9,10,51,55],$V7=[1,23],$V8=[1,26],$V9=[1,39],$Va=[1,45],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,42],$Vf=[1,43],$Vg=[1,44],$Vh=[26,28],$Vi=[13,26,28],$Vj=[1,58],$Vk=[1,61],$Vl=[1,62],$Vm=[1,81],$Vn=[1,82],$Vo=[1,83],$Vp=[1,80],$Vq=[1,73],$Vr=[1,75],$Vs=[1,74],$Vt=[26,36,38,55,65,77,81,82,83,84],$Vu=[1,86],$Vv=[1,87],$Vw=[13,26,28,29,36,38,55,65,67,68,77,81,82,83,84],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[13,26,28,29,36,38,55,65,67,68,69,70,71,72,73,74,81,82,83,84],$VE=[1,94],$VF=[1,95],$VG=[13,26,28,29,36,38,55,65,67,68,69,70,71,72,73,74,76,77,81,82,83,84],$VH=[1,96],$VI=[1,97],$VJ=[13,26,28,29,36,38,55,65,67,68,69,70,71,72,73,74,76,77,78,80,81,82,83,84],$VK=[1,100],$VL=[7,8,9,10,26,34,35,36,41,43,44,53,55,65,77,81,82,83,84,87,89],$VM=[1,120],$VN=[13,29,38],$VO=[26,36,55,65,77,81,82,83,84],$VP=[26,28,36,55,65,81,82,83,84],$VQ=[7,8,9,10,38],$VR=[1,156],$VS=[26,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"MAININSTRUCTIONS":4,"EOF":5,"TYPE":6,"intType":7,"floatType":8,"boolType":9,"stringType":10,"MAININSTRUCTION":11,"DECLARATION":12,";":13,"FUNCTION":14,"FUNCCALLS":15,"INSTRUCTIONS":16,"INSTRUCTION":17,"SUPRAEXPRESSION":18,"FUNCRETURN":19,"PRINTFUNC":20,"READFUNC":21,"HYPERCONDITIONAL":22,"LOOPS":23,"ASSIGNMENTS":24,"ASSIGNMENT":25,"ID":26,"DIMENSIONS":27,"]":28,"=":29,"HYPEREXPRESSION":30,"CONDITIONAL":31,"CONDITIONALELSE":32,"{":33,"}":34,"IF":35,"(":36,"CONDITIONALHYPEREXPRESSION":37,")":38,"ELSE":39,"WHILECOMMAND":40,"WHILE":41,"DOCOMMAND":42,"DO":43,"FOR":44,"FORASSIGNMENT":45,"PARAMETER":46,"PARAMETERS":47,"FUNCTYPE":48,"voidType":49,"FUNCDEFINITION":50,"FUNC":51,"FUNCHEADER":52,"RETURN":53,"FUNCCALLHEADER":54,"CallType":55,"ARGUMENTS":56,"ARGUMENT":57,"FACTFUNCCALLS":58,"ARRHEADER":59,"[":60,"ARRBODY":61,"EXPRESSION":62,"ARRCALL":63,"DIMENSION":64,"NUMBER":65,"SUPEREXPRESSION":66,"&&":67,"||":68,"<":69,"<=":70,">":71,">=":72,"!=":73,"==":74,"TERMS":75,"+":76,"-":77,"*":78,"FACTOR":79,"/":80,"FLOAT":81,"TEXT":82,"TRUE":83,"FALSE":84,"READARGUMENT":85,"READBODY":86,"READ":87,"PRINTBODY":88,"PRINT":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"intType",8:"floatType",9:"boolType",10:"stringType",13:";",26:"ID",28:"]",29:"=",33:"{",34:"}",35:"IF",36:"(",38:")",39:"ELSE",41:"WHILE",43:"DO",44:"FOR",49:"voidType",51:"FUNC",53:"RETURN",55:"CallType",60:"[",65:"NUMBER",67:"&&",68:"||",69:"<",70:"<=",71:">",72:">=",73:"!=",74:"==",76:"+",77:"-",78:"*",80:"/",81:"FLOAT",82:"TEXT",83:"TRUE",84:"FALSE",87:"READ",89:"PRINT"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[11,2],[11,1],[11,2],[4,2],[4,1],[16,2],[16,1],[17,2],[17,2],[17,2],[17,2],[17,2],[17,1],[17,1],[12,2],[24,2],[24,1],[25,1],[25,2],[25,3],[22,1],[22,4],[31,7],[32,8],[37,1],[40,1],[42,1],[23,7],[23,8],[23,8],[45,3],[46,2],[46,3],[47,2],[47,1],[48,1],[48,1],[48,1],[48,1],[48,1],[50,3],[52,4],[52,3],[14,4],[19,2],[54,3],[56,2],[56,1],[57,1],[15,3],[15,2],[58,3],[58,2],[59,2],[61,2],[61,1],[63,2],[27,2],[27,1],[64,3],[64,3],[18,3],[18,1],[30,1],[30,3],[30,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[62,1],[62,3],[62,3],[75,3],[75,3],[75,1],[79,1],[79,2],[79,1],[79,2],[79,1],[79,2],[79,1],[79,1],[79,1],[79,1],[79,3],[85,1],[85,2],[86,2],[86,1],[21,4],[88,2],[88,1],[20,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
    if(functions[1].quadruplesStart === null)
    {
        console.log("Main function is missing");
        throw new Error("Main function is missing");
    }
    // aqui deberia regresar la tabla de memoria de las funciones, etc
    console.log("quadruples:",quadruples);
    console.log("operands:",operandStack);
    console.log("jumps:",jumpStack);
    console.log("functions:",functions);
    console.log("current function:",currentFunction)
    return {quadruples,functions};
    
break;
case 2:

      currentType = "int";

break;
case 3:

    currentType = "float";

break;
case 4:

    currentType = "bool";

break;
case 5:

    currentType = "string";

break;
case 20:

        currentType = null;

break;
case 23:

        createVariable($$[$0],currentType,functions[currentFunction]);
    
break;
case 24:

        createArrayVariable(currentArray,functions[currentFunction]);
        currentArray = null;
    
break;
case 25:

        let declaredVar = createVariable($$[$0-2],currentType,functions[currentFunction]);
        var rightOperand = operandStack.pop();
        var rightType = typeStack.pop();
        var leftOperand = declaredVar.address;
        var leftType = currentType;
        var operator = "=";
        if(rightType != leftType && !(rightType === "int" && leftType === "float"))
        {
            console.log("Operation",leftType,operator,rightType,"is not valid");
            throw new Error("Operation is not valid");
        }
        console.log(`${leftOperand}(${leftType})${operator}${rightOperand}(${rightType})`)
        quadruples.push({operator:operator,operand:leftOperand,value:rightOperand,global:currentFunction === 0});
    
break;
case 27:

            var end = jumpStack.pop();
            var quadruple = quadruples[end];
            quadruple.address = quadruples.length;


break;
case 28:

                var end = jumpStack.pop();
                var quadruple = quadruples[end];
                quadruple.address = quadruples.length;

break;
case 29:

                var end = jumpStack.pop();
                var quadruple = quadruples[end];
                jumpStack.push(quadruples.length);
                quadruples.push({operator:"GOTO",address:result,global:currentFunction === 0});
                quadruple.address = quadruples.length;
      

break;
case 30:

            // check if there is a result  if no result its an error
            var resultOperand = operandStack.pop();
            var resultType = typeStack.pop();
            if(resultType != "bool")
            {
                console.log("A conditional statement should be a boolean");
                throw new Error("A conditional statement should be a boolean");
            }
            jumpStack.push(quadruples.length);
            quadruples.push({operator:"GOTOF",value:resultOperand,address:null,global:currentFunction === 0});
        
break;
case 31: case 32:
jumpStack.push(quadruples.length);
break;
case 33:

                         var end = jumpStack.pop();
                         var whileStart =  jumpStack.pop();
                         var quadruple = quadruples[end];
                         quadruples.push({operator:"GOTO",address:whileStart,global:currentFunction === 0});
                         quadruple.address = quadruples.length;


break;
case 34:

        var resultOperand = operandStack.pop();
            var resultType = typeStack.pop();
            console.log(resultOperand,resultType);
            if(resultType != "bool")
            {
                console.log("A conditional statement should be a boolean");
                throw new Error("A conditional statement should be a boolean");
            }
            var end = jumpStack.pop();
            quadruples.push({operator:"GOTOT",value:resultOperand,address:end,global:currentFunction === 0});

break;
case 35:

        var pendingFalseQuadruple = jumpStack.pop();
        var forStart = jumpStack.pop();
        var quadruple = quadruples[pendingFalseQuadruple];
        quadruples.push({operator:"GOTO",address:forStart,global:currentFunction === 0});
        quadruple.address = quadruples.length;


break;
case 36:

        let forVar = createVariable($$[$0-2],"int",functions[currentFunction]);
        var rightOperand = operandStack.pop();
        var rightType = typeStack.pop();
        var leftOperand = forVar.address;
        var leftType = "int";
        var operator = "=";
        if(rightType != leftType && !(rightType === "int" && leftType === "float")) 
        {
            console.log("Type should be int");
            throw new Error("For loops only take int types");
        }
        console.log(`${leftOperand}(${leftType})${operator}${rightOperand}(${rightType})`)
        quadruples.push({operator:operator,operand:leftOperand,value:rightOperand,global:currentFunction === 0});
        // this should be the reference to goto at the end of the for
        jumpStack.push(quadruples.length);
    
break;
case 37:

         createVariable($$[$0],$$[$0-1],functions[currentFunction],"parameter");
         functions[currentFunction].parameters.push($$[$0-1]);

break;
case 38:

        currentArray.type = $$[$0-2];
        createArrayVariable(currentArray,functions[currentFunction],"parameter");
       functions[currentFunction].parameters.push({type:$$[$0-2],dimensions:currentArray.dimensions.map(dimension => {return dimension.upperLimit}  )});
        currentArray = null;

break;
case 46:

    if($$[$0] === "main" && $$[$0-1] !== "void"){
        console.log("Main function should be void");
        throw new Error("Main function should be void");
    }
    if(functions.some((func) => func.name === $$[$0])  && $$[$0] !== "main")
    {
        console.log(`Function ${$$[$0]} already exists`);
        throw new Error(`Function ${$$[$0]} was already declared`);
    }else if($$[$0] === "main" && functions.find((func) => func.name === $$[$0]).quadruplesStart !== null)
    {
        console.log('Main was already declared');
        throw new Error("Main was already declared");
    }
    if($$[$0] !== "main" )
    {
        let functionVariable =  createVariable($$[$0], $$[$0-1], functions[0], "local");
        functions.push({name:$$[$0],returnType:$$[$0-1],parameters:[],size:null,variables:[],quadruplesStart:null,globalAddress:functionVariable.address});
        currentFunction = functions.length-1;
    }else {
        currentFunction=1;
    }
    nextAvailable=1;
    nextPointerAvailable=1;
    resetAvailableAddresses();

break;
case 47:

    if(functions[currentFunction].name === "main")
    {
        console.log("Main function should not have parameters");
        throw new Error("Main function should not have parameters");
    }
    functions[currentFunction].quadruplesStart = quadruples.length;

break;
case 48:

    if(functions[currentFunction].name === "main")
    {
        quadruples[0].address = quadruples.length;
    }
    functions[currentFunction].quadruplesStart = quadruples.length;

break;
case 49:

    finishFunction(functions[currentFunction],quadruples)
    currentFunction = 0;
    nextAvailable = functions[currentFunction].variables.filter(variable => variable.varType == "temporal").length + 1

break;
case 50:

            // aqui podria asignarse el valor obtenido a la variable global con el mismo nombre de la funcion
            createReturnVar(functions[currentFunction],typeStack,operandStack,quadruples);

break;
case 51:

    // prepara el numero de parametros
    // genera ERA size para traer el new size
    // check function exist
    functionCalled = functions.find(func => func.name === $$[$0-1]);
    if(!functionCalled)
    {
        console.log(`The function ${$$[$0-1]}does not exist`);
        throw new Error(`The function ${$$[$0-1]} does not exist`);
    }
    availableParams = [...functionCalled.parameters];
    console.log("Available Params :",[...availableParams]);
    functionCallCurrentParam = 1
    quadruples.push({operator:"ERA",functionName:$$[$0-1],global:currentFunction === 0,global:currentFunction === 0});

break;
case 54:

            var currentParam = availableParams.shift();
            if(currentParam === null || currentParam === undefined)
            {
                console.log("Too many arguments for the function");
                throw new Error("Too many arguments for the function")
            }
            var operand = operandStack.pop();
            var operandType = typeStack.pop();
            var param = functionCallCurrentParam;
            checkParams(operand,operandType,currentParam,functionCallCurrentParam,currentFunction,functions,quadruples)
            functionCallCurrentParam++;

break;
case 55:

    // revisar que los parametros usados este vacio
    if(availableParams.length > 0)
    {
        console.log("Arguments missing");
        throw new Error("Arguments missing for function call");
    }
    // aqui va a generar go sub, procedure_name,initial-address (quadrupplo hihi)
    quadruples.push({operator:"GOSUB",value:functionCalled.name,global:currentFunction === 0});
    // recordar el address donde estabas antes
    // asignar el valor que tiene la variable global nombre de func en ese momento al sig temporal
    if(functionCalled.returnType != "void")
    {
        // la variable global con el mismo nombre de la funcion deberia tener el valor necesario;
        var result = nextAvail();
        var resultType = functionCalled.returnType;
        createVariable(result, resultType, functions[currentFunction], "temporal");
        quadruples.push({operator:"=",operand:result,value:functionCalled.name,global:currentFunction === 0})
    }
    

break;
case 56:

    if(availableParams.length > 0)
    {
        console.log("Arguments missing");
        throw new Error("Arguments missing for function call");
    }
    quadruples.push({operator:"GOSUB",value:functionCalled.name,global:currentFunction === 0});
    // recordar el address donde estabas antes
    // asignar el valor que tiene la variable global nombre de func en ese momento al sig temporal
    if(functionCalled.returnType != "void")
    {
        // la variable global con el mismo nombre de la funcion deberia tener el valor necesario;
        var result = nextAvail();[]
        var resultType = functionCalled.returnType;
        createVariable(result, resultType, functions[currentFunction], "temporal");
        quadruples.push({operator:"=",operand:result,value:functionCalled.name,global:currentFunction === 0})
    }

break;
case 57:

    // revisar que los parametros usados este vacio
    if(availableParams.length > 0)
    {
        console.log("Arguments missing");
        throw new Error("Arguments missing for function call");
    }
    // aqui va a generar go sub, procedure_name,initial-address (quadrupplo hihi)
    quadruples.push({operator:"GOSUB",value:functionCalled.name,global:currentFunction === 0});
    // recordar el address donde estabas antes
    // asignar el valor que tiene la variable global nombre de func en ese momento al sig temporal
    if(functionCalled.returnType != "void")
    {
        // la variable global con el mismo nombre de la funcion deberia tener el valor necesario;
        var result = nextAvail();
        var resultType = functionCalled.returnType;
        let createdVar = createVariable(result, resultType, functions[currentFunction], "temporal");
        quadruples.push({operator:"=",operand:createdVar.address,value:functionCalled.globalAddress,global:currentFunction === 0})
        operandStack.push(createdVar.address);
        typeStack.push(resultType);
    }
    

break;
case 58:

    if(availableParams.length > 0)
    {
        console.log("Arguments missing");
        throw new Error("Arguments missing for function call");
    }
      quadruples.push({operator:"GOSUB",value:functionCalled.name,global:currentFunction === 0});
    // recordar el address donde estabas antes
    // asignar el valor que tiene la variable global nombre de func en ese momento al sig temporal
    if(functionCalled.returnType != "void")
    {
        // la variable global con el mismo nombre de la funcion deberia tener el valor necesario;
        var result = nextAvail();[]
        var resultType = functionCalled.returnType;
        let createdVar= createVariable(result, resultType, functions[currentFunction], "temporal");
        quadruples.push({operator:"=",operand:createdVar.address,value:functionCalled.name,global:currentFunction === 0})
        operandStack.push(createdVar.address);
        typeStack.push(resultType);
    }

break;
case 59:

        let arrayVariable = getArrayVariable($$[$0-1],functions,currentFunction);
        arrayCalled = arrayVariable;
        arrayCalledLabel = {label:arrayVariable.name,dimensions:[]};
        currentDimension = 0;


break;
case 60:

     let dimensionIndex = createDimensionQuad(arrayCalled,currentDimension,currentArrayCallIndex,quadruples,operandStack,typeStack,nextAvail,functions,currentFunction)
     arrayCalledLabel.dimensions.push(dimensionIndex);
     if(currentDimension !== arrayCalled.dimensions.length-1)
     {
     currentArrayCallIndex = operandStack.pop();
     typeStack.pop();
     }
     currentDimension++;

break;
case 61:

    let lastDimensionIndex = createDimensionQuad(arrayCalled,currentDimension,currentArrayCallIndex,quadruples,operandStack,typeStack,nextAvail,functions,currentFunction)
    arrayCalledLabel.dimensions.push(lastDimensionIndex);
    if(currentDimension !== arrayCalled.dimensions.length-1)
     {
     currentArrayCallIndex = operandStack.pop();
     typeStack.pop();
     }
    currentDimension++;

break;
case 65:

    if(currentArray === null)
    {
        console.log("Dimensions can only be created within a named array");
        throw new Error("Dimensions can only be created within a named array");
    }
    if($$[$0] < 1)
    {
        console.log("Array limits must be positive values");
        throw new Error("Array limits must be positive values");
    }
    createConstantVariable($$[$0],"int",functions[0])
    currentArray.dimensions.push({upperLimit:$$[$0],m:0});

break;
case 66:

    if($$[$0]< 1)
    {
        console.log("Array limits must be positive values");
        throw new Error("Array limits must be positive values");
    }
    createConstantVariable($$[$0],"int",functions[0])
    currentArray = {type:currentType,name:$$[$0-2],varType:currentFunction.global === true ? "global" : "local",dimensions:[{upperLimit:$$[$0]}]};


break;
case 67:

            createAssignmentQuad(quadruples,operandStack,"=",typeStack,currentFunction===0);
        
break;
case 72:

            createOperationQuad(quadruples,operandStack, "<",typeStack, nextAvail, functions[currentFunction]);
        
break;
case 73:

            createOperationQuad(quadruples, operandStack, '<=', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 74:

            createOperationQuad(quadruples, operandStack, '>', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 75:

            createOperationQuad(quadruples, operandStack, '>=', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 76:

            createOperationQuad(quadruples, operandStack, '!=', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 77:

            createOperationQuad(quadruples, operandStack, '==', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 80:

            createOperationQuad(quadruples, operandStack, '+', typeStack,nextAvail, functions[currentFunction]);
        
break;
case 81:

            createOperationQuad(quadruples, operandStack, '-', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 82:

            createOperationQuad(quadruples, operandStack, '*', typeStack, nextAvail, functions[currentFunction]);
        
break;
case 83:

            createOperationQuad(quadruples, operandStack, "/", typeStack, nextAvail, functions[currentFunction]);
        
break;
case 85:

            // add check constants
            let numberAddress = createConstantVariable($$[$0],"int",functions[0])
            typeStack.push("int");
            operandStack.push(numberAddress);
        
break;
case 86:

            console.log($$[$0]*-1);
            let negativeNAddress =createConstantVariable($$[$0]*-1,"int",functions[0])
            // add check constants
            operandStack.push(negativeNAddress);
            typeStack.push("int");
        
break;
case 87:

            let floatAddress = createConstantVariable($$[$0],"float",functions[0])
            operandStack.push(floatAddress);
            typeStack.push("float");
        
break;
case 88:

            console.log($$[$0]*-1);
            // add check constants
            let negativeFAddress = createConstantVariable($$[$0]*-1,"float",functions[0])
            operandStack.push(negativeFAddress);
            typeStack.push("float");
        
break;
case 89:

            // check var exists
            // if var doesnt exist throw error
            let variable = getVariable($$[$0],functions,currentFunction);
            operandStack.push(variable.address);
            typeStack.push(variable.type);
        
break;
case 90:

            if(currentDimension <= arrayCalled.dimensions.length-1)
            {
                console.log(`Incorrect call array ${arrayCalled.name} has more dimensionesn`);
                throw new Error(`Incorrect call array ${arrayCalled.name} has more dimensionesn`);

            }
            arrayCalled = null;
            currentArrayCallIndex = null;
        
break;
case 92:

            let stringAddress = createConstantVariable($$[$0],"string",functions[0])
            operandStack.push(stringAddress);
            typeStack.push("string");
        
break;
case 93:

            let booleanTAddress = createConstantVariable("true","bool",functions[0])
            // constant address
            operandStack.push(booleanTAddress);
            typeStack.push("bool");
        
break;
case 94:

            // constant address
            let booleanFAddress = createConstantVariable("false","bool",functions[0])
            operandStack.push(booleanFAddress);
            typeStack.push("bool");
        
break;
case 96:

            let readVariable = getVariable($$[$0],functions,currentFunction);
            operandStack.push({address:readVariable.address,label:readVariable.name});
            typeStack.push(readVariable.type);

        
break;
case 97:

            if(currentDimension <= arrayCalled.dimensions.length-1)
            {
                console.log(`Incorrect call array ${arrayCalled.name} has more dimensionesn`);
                throw new Error(`Incorrect call array ${arrayCalled.name} has more dimensions`);

            }
            operandStack[operandStack.length] = {address:operandStack[operandStack.length -1],label:arrayCalledLabel}
            arrayCalled = null;
            arrayCalledLabel =  null;
            currentArrayCallIndex = null;
        
break;
case 98: case 99:

                createReadQuad(quadruples,operandStack,typeStack)
            
break;
case 101:

                createPrintQuad(quadruples,operandStack,typeStack)
                
            
break;
case 102:

                createPrintQuad(quadruples,operandStack,typeStack)
            
break;
}
},
table: [{3:1,4:2,6:7,7:$V0,8:$V1,9:$V2,10:$V3,11:3,12:4,14:5,15:6,50:14,51:$V4,52:8,54:9,55:$V5},{1:[3]},{5:[1,17],6:7,7:$V0,8:$V1,9:$V2,10:$V3,11:18,12:4,14:5,15:6,50:14,51:$V4,52:8,54:9,55:$V5},o($V6,[2,10]),{13:[1,19]},o($V6,[2,7]),{13:[1,20]},{24:21,25:22,26:$V7,27:24,28:$V8,64:25},{33:[1,27]},{26:$V9,30:31,36:$Va,38:[1,29],54:47,55:$V5,56:28,57:30,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($Vh,[2,2]),o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),{36:[1,48]},{26:[1,49]},{7:[1,51],8:[1,52],9:[1,53],10:[1,54],48:50,49:[1,55]},{1:[2,1]},o($V6,[2,9]),o($V6,[2,6]),o($V6,[2,8]),{13:[2,20],25:56,26:$V7,27:24,28:$V8,64:25},o($Vi,[2,22]),o($Vi,[2,23],{29:[1,57],60:$Vj}),{26:$Vk,28:[1,59],64:60},o($Vh,[2,64]),{60:$Vl},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,16:63,17:64,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{26:$V9,30:31,36:$Va,38:[1,84],54:47,55:$V5,57:85,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{13:[2,56]},o($Vt,[2,53]),o($Vt,[2,54],{67:$Vu,68:$Vv}),o($Vw,[2,69],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VD,[2,78],{76:$VE,77:$VF}),o($VG,[2,79],{78:$VH,80:$VI}),o($VJ,[2,84]),o($VJ,[2,85]),{65:[1,98],81:[1,99]},o($VJ,[2,87]),o($VJ,[2,89],{60:$VK}),{28:[1,101]},o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93]),o($VJ,[2,94]),{18:102,26:$V9,30:72,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,61:103,62:104,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,30:31,36:$Va,38:[1,106],54:47,55:$V5,56:105,57:30,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{6:110,7:$V0,8:$V1,9:$V2,10:$V3,38:[1,108],46:109,47:107},{36:[1,111]},{26:[1,112]},{26:[2,41]},{26:[2,42]},{26:[2,43]},{26:[2,44]},{26:[2,45]},o($Vi,[2,21]),{26:$V9,30:113,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{65:[1,114]},o($Vi,[2,24],{60:$Vl}),o($Vh,[2,63]),{60:$Vj},{65:[1,115]},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,17:117,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,34:[1,116],35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},o($VL,[2,12]),{13:[1,118]},{13:[1,119],29:$VM},{13:[1,121]},{13:[1,122]},{13:[1,123]},o($VL,[2,18]),o($VL,[2,19]),o($VN,[2,68],{67:$Vu,68:$Vv}),{26:$V9,30:124,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{36:[1,125]},{36:[1,126]},o($VL,[2,26]),{33:[1,127]},{36:[1,128]},{33:[1,129]},{36:[1,130]},{36:[1,131]},{36:[2,31]},{33:[2,32]},{13:[2,55]},o($Vt,[2,52]),{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:132,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:133,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:134,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:135,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:136,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:137,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:138,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,62:139,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,63:40,65:$Vb,75:140,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,63:40,65:$Vb,75:141,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,63:40,65:$Vb,77:$Vc,79:142,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{26:$V9,36:$Va,54:47,55:$V5,58:41,59:46,63:40,65:$Vb,77:$Vc,79:143,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($VJ,[2,86]),o($VJ,[2,88]),o($VO,[2,59]),o($VJ,[2,90]),{29:$VM,38:[1,144]},{26:$V9,28:[2,62],36:$Va,54:47,55:$V5,58:41,59:46,62:145,63:40,65:$Vb,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($VP,[2,61],{76:$VE,77:$VF}),{26:$V9,30:31,36:$Va,38:[1,146],54:47,55:$V5,57:85,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($VJ,[2,58]),{6:110,7:$V0,8:$V1,9:$V2,10:$V3,38:[1,147],46:148},{33:[2,48]},o($VQ,[2,40]),{26:[1,149],27:150,28:$V8,64:25},o($Vt,[2,51]),{36:[2,46]},o($Vi,[2,25],{67:$Vu,68:$Vv}),o($Vh,[2,66]),o($Vh,[2,65]),o($V6,[2,49]),o($VL,[2,11]),o($VL,[2,13]),o($VL,[2,14]),{26:$V9,30:151,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($VL,[2,15]),o($VL,[2,16]),o($VL,[2,17]),{13:[2,50],67:$Vu,68:$Vv},{26:$V9,30:153,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,88:152},{26:$VR,59:46,63:157,85:155,86:154},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,16:158,17:64,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{26:$V9,30:160,36:$Va,37:159,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,16:161,17:64,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{26:[1,163],45:162},{26:$V9,30:160,36:$Va,37:164,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($Vw,[2,70],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($Vw,[2,71],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VD,[2,72],{76:$VE,77:$VF}),o($VD,[2,73],{76:$VE,77:$VF}),o($VD,[2,74],{76:$VE,77:$VF}),o($VD,[2,75],{76:$VE,77:$VF}),o($VD,[2,76],{76:$VE,77:$VF}),o($VD,[2,77],{76:$VE,77:$VF}),o($VG,[2,80],{78:$VH,80:$VI}),o($VG,[2,81],{78:$VH,80:$VI}),o($VJ,[2,82]),o($VJ,[2,83]),o($VJ,[2,95]),o($VP,[2,60],{76:$VE,77:$VF}),o($VJ,[2,57]),{33:[2,47]},o($VQ,[2,39]),o($VQ,[2,37],{60:$Vj}),{26:$Vk,28:[1,165],64:60},o($VN,[2,67],{67:$Vu,68:$Vv}),{26:$V9,30:167,36:$Va,38:[1,166],54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},o($Vt,[2,102],{67:$Vu,68:$Vv}),{26:$VR,38:[1,168],59:46,63:157,85:169},o($VS,[2,99]),o($VS,[2,96],{60:$VK}),{28:[1,170]},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,17:117,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,34:[1,171],35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{38:[1,172]},{38:[2,30],67:$Vu,68:$Vv},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,17:117,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,34:[1,173],35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{26:$V9,30:160,36:$Va,37:174,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{29:[1,175]},{38:[1,176]},o($VQ,[2,38],{60:$Vl}),{13:[2,103]},o($Vt,[2,101],{67:$Vu,68:$Vv}),{13:[2,100]},o($VS,[2,98]),o($VS,[2,97]),o($VL,[2,27]),{33:[1,177]},{41:[1,178]},{38:[1,179]},{26:$V9,30:180,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{33:[1,181]},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,16:182,17:64,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{36:[1,183]},{33:[1,184]},o($VO,[2,36],{67:$Vu,68:$Vv}),{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,16:185,17:64,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,17:117,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,34:[1,186],35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{26:$V9,30:187,36:$Va,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,16:188,17:64,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,17:117,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,34:[1,189],35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},o($VL,[2,33]),{38:[1,190],67:$Vu,68:$Vv},{6:7,7:$V0,8:$V1,9:$V2,10:$V3,12:65,17:117,18:66,19:67,20:68,21:69,22:70,23:71,26:$V9,30:72,31:76,32:77,34:[1,191],35:$Vm,36:$Va,40:78,41:$Vn,42:79,43:$Vo,44:$Vp,53:$Vq,54:47,55:$V5,58:41,59:46,62:33,63:40,65:$Vb,66:32,75:34,77:$Vc,79:35,81:$Vd,82:$Ve,83:$Vf,84:$Vg,87:$Vr,89:$Vs},o($VL,[2,28],{39:[1,192]}),o($VL,[2,34]),o($VL,[2,35]),{33:[2,29]}],
defaultActions: {17:[2,1],29:[2,56],51:[2,41],52:[2,42],53:[2,43],54:[2,44],55:[2,45],82:[2,31],83:[2,32],84:[2,55],108:[2,48],112:[2,46],147:[2,47],166:[2,103],168:[2,100],192:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {semanticTable} = require("./semanticTable");
    const {createReturnVar,finishFunction,checkParams} = require("./functionsUtils");
    const {createVariable,createConstantVariable,getVariable,getArrayVariable,createArrayVariable,resetAvailableAddresses} = require("./variableUtils");
    const {getOperands,createAssignmentQuad,createOperationQuad,createPrintQuad,createReadQuad} = require("./quadrupleUtils");
    const {createDimensionQuad} = require("./arrayUtils");

    var operandStack = [];
    var typeStack = [];
    var currentDimension = 0;
    var arrayCalled = null; 
    var arrayCalledLabel = null;
    var currentArrayCallIndex = null;

    var availableParams = [];
    var functionCalled = null;
    var functionCallCurrentParam = 0;
    var quadruples = [{operator:"GOTO",address:null}];
    
    var functions = [{variables:[],global:true},{name:"main",returnType:"void",parameters:[],variables:[],size:null,quadruplesStart:null}];
    let currentFunction = 0;
    var jumpStack = [];
    let nextAvailable = 1;
    let nextPointerAvailable =1;
    function nextAvail(pointer=false) {
        if(pointer)
        {
            let variable = `tp${nextPointerAvailable}`;
            nextPointerAvailable++;
            return variable;
        }
        let variable = `t${nextAvailable}`;
        nextAvailable++;
        return variable;
    }
    var currentType = "";
    var currentArray = null;

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 81
break;
case 2:return 65
break;
case 3:return 78
break;
case 4:return 80
break;
case 5:return 77
break;
case 6:return 76
break;
case 7:return 36
break;
case 8:return 38
break;
case 9:return 33
break;
case 10:return 34
break;
case 11:return 69
break;
case 12:return 71
break;
case 13:return 70
break;
case 14:return 72
break;
case 15:return 73
break;
case 16:return 74
break;
case 17:return 29
break;
case 18:return 13
break;
case 19:return 55
break;
case 20:return 60
break;
case 21:return 28
break;
case 22:return 83
break;
case 23:return 84
break;
case 24:return 9
break;
case 25:return 10
break;
case 26:return 8
break;
case 27:return 7
break;
case 28:return 35
break;
case 29:return 49
break;
case 30:return 39
break;
case 31:return 41
break;
case 32:return 43
break;
case 33:return 44
break;
case 34:return 51
break;
case 35:return 53
break;
case 36:return 89
break;
case 37:return 87
break;
case 38:return 82
break;
case 39:return 26
break;
case 40:return 5
break;
case 41:
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?::<)/,/^(?::>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:bool\b)/,/^(?:string\b)/,/^(?:float\b)/,/^(?:int\b)/,/^(?:if\b)/,/^(?:void\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:func\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:read\b)/,/^(?:"[^\"]*")/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = index;
exports.Parser = index.Parser;
exports.parse = function () { return index.parse.apply(index, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}